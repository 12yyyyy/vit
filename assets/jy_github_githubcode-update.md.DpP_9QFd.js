import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.ZS1GtFyN.js";const e="/assets/image1.CViMYw_y.png",p="/assets/image2.CfnwTcJU.png",l="/assets/image3.DGXvk8Qj.png",n="/assets/image4.CpxWULkR.png",o="/assets/image5.CZSnifGs.png",h="/assets/image6.cBJ1dcts.png",c="/assets/image7.Ds-HwZS-.png",d="/assets/image8.C7tCjbFS.png",g="/assets/image9.DtMt77hJ.png",r="/assets/image10.CUc3eo0f.png",u="/assets/image11.CJb4_V5z.png",k="/assets/image13.DElpPTLe.png",b="/assets/image12.D86Z6Mcc.png",G=JSON.parse('{"title":"Github仓库的创建和文件的上传与更新","description":"","frontmatter":{},"headers":[],"relativePath":"jy/github/githubcode-update.md","filePath":"jy/github/githubcode-update.md","lastUpdated":null}'),m={name:"jy/github/githubcode-update.md"},y=t('<h1 id="github仓库的创建和文件的上传与更新" tabindex="-1">Github仓库的创建和文件的上传与更新 <a class="header-anchor" href="#github仓库的创建和文件的上传与更新" aria-label="Permalink to &quot;Github仓库的创建和文件的上传与更新&quot;">​</a></h1><h2 id="一、创建仓库" tabindex="-1">一、创建仓库 <a class="header-anchor" href="#一、创建仓库" aria-label="Permalink to &quot;一、创建仓库&quot;">​</a></h2><p>1、右键头像，选择<code>your repositories</code>可以查看你现有的仓库</p><p>点击头像旁“+”，选择<code>new repository</code>，新建仓库 <img src="'+e+'" alt="alt text"></p><p><code>Repository name</code> 仓库名称,  <code>Descriptions</code> 简介,  <code>add a readme file</code> 要勾选上，不然后续有些麻烦(要先添加已有库连接) <img src="'+p+'" alt="alt text"> 创建成功</p><p>2、安装git客户端</p><p>官网：<a href="https://git-scm.com/download/" target="_blank" rel="noreferrer">https://git-scm.com/download/</a></p><p>右键出现<code>Git Bash Here Git GUI Here</code>即可 <img src="'+l+'" alt="alt text"></p><p>2.1、绑定用户</p><p>打开<code>git-bash.exe</code>，因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识，用户和邮箱</p><p>为你github注册的账号和邮箱， 输入:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global user.name “用户名”</span></span>\n<span class="line"><span>git config --global user.email “邮箱”`</span></span></code></pre></div><p><img src="'+n+'" alt="alt text"> 3、为Github账户设置SSH key</p><p>如图先查看有没有<code>id_rsa</code>两个文件</p><p><img src="'+o+'" alt="alt text"></p><p>通过<code>$ ssh-keygen -t rsa -C “xxxxxx@qq.com”</code>来生成，执行后会询问三次：第一个是路径默认回车即可，这里的第二个、第三个是密码，可以不设置默认回车</p><p>生成成功后，再去对应目录<code>C:\\Users\\用户名\\ .ssh里用记事本打开id_rsa.pub</code>，复制得到ssh key公钥</p><p>在github中添加密钥</p><p>点击设置，选择<code>SSH keys</code>菜单，<code>Add SSH key</code>新增密钥，把刚刚复制的粘贴过来保存 <img src="'+h+'" alt="alt text"><img src="'+c+'" alt="alt text"> 至此，GitHub的<code>SSH keys</code>配置完成</p><h2 id="二、上传本地项目到github" tabindex="-1">二、上传本地项目到Github <a class="header-anchor" href="#二、上传本地项目到github" aria-label="Permalink to &quot;二、上传本地项目到Github&quot;">​</a></h2><p>1、在本地建立一个空文件夹demo <img src="'+d+'" alt="alt text"> 将要传的文件复制到demo中</p><p>在文件夹中右键选择<code>Git Bash Here</code><img src="'+g+'" alt="alt text"> 按照如下顺序上传文件到Github，把这个目录变成Git可以管理的仓库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git init</span></span></code></pre></div><p>将所有文件添加到仓库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add .</span></span></code></pre></div><p>把文件提交到仓库，双引号内是提交注释。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit -m &quot;updata&quot;</span></span></code></pre></div><p><img src="'+r+`" alt="alt text"> 关联github仓库，“HTTPS”代表你仓库的HTTPS地址（在GitHub上面去复制）<code>可能报错无法连接到GitHub服务器</code>需要先关闭SLL证书验证，详细解决步骤在后面更新部分找3.1位置查看。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add origin &quot;HTTPS&quot;</span></span></code></pre></div><p>2、上传本地代码</p><p>2.1上传前一定要先执行<code>git pull origin main</code>命令，将远程的最新更改合并到本地的main分支。这可以保证自己本地分支与远程分支同步，避免在推送时被拒绝。(我一般用强制合并到main分支：<code>git pull origin main --allow-unrelated-histories</code>)</p><p>将本地的master分支重命名为main：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git branch -m main</span></span></code></pre></div><p>然后</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push -u origin main(推荐选择main)</span></span>
<span class="line"><span># git push -u origin master</span></span></code></pre></div><p><img src="`+u+'" alt="alt text"> 完成后，没有报错代表上传完成，本地代码已经推送到github仓库了，就可以现在去githubt仓库看看；</p><p>接着去点击此仓库的<code>setting</code>，选择<code>Branch</code>，更改为<code>master</code>就可以看到上传的代码（等待一会，多刷新）</p><p>第一次操作这个的恭喜你大功告成了，可以安心享用了🎉 💯</p><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p>但我的报错了🤡</p></div><details class="details custom-block"><summary>如果无法连接到GitHub服务器-点我查看</summary><p>(详细步骤在后面更新部分找3.1位置查看。)无法连接到GitHub服务器，这可能是由于网络问题、SSH密钥配置问题或GitHub服务器地址设置不正确等原因导致的。</p><ul><li>具体问题具体分析：方法不固定(自己去查)，我这里尝试使用使用HTTPS代替SSH：如果你不想使用SSH，也可以选择使用HTTPS方式推送。首先，你需要在你的Git仓库中更改远程仓库的URL，将其更改为HTTPS格式，例如：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote set-url origin https://github.com/12yyyyy/vit.git</span></span></code></pre></div><p>然后<code>git push</code></p><p>成功了就🆗，不成功去后面继续看5.2部分操作解决</p></details><details class="details custom-block"><summary>如果报错SSL证书问题-点我查看</summary><p>(详细步骤在后面更新部分找3.3位置查看。)如果报错SSL证书问题：就临时禁用证书验证--可以通过设置<code>http.sslVerify</code>为<code>false</code>来禁用证书验证：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global http.sslVerify false</span></span></code></pre></div><p>最保险的方式是将其设置回默认的true值，即开启证书验证：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global http.sslVerify true</span></span></code></pre></div></details><h2 id="三、更新本地项目到github-更新仓库内容" tabindex="-1">三、更新本地项目到Github(更新仓库内容) <a class="header-anchor" href="#三、更新本地项目到github-更新仓库内容" aria-label="Permalink to &quot;三、更新本地项目到Github(更新仓库内容)&quot;">​</a></h2><p>基本步骤不变，由于GitHub不能直接覆盖上传，所以更新代码要多出拉取仓库文件这一步</p><p>1.复制本地地址，新建空白文件夹<code>updata</code>，把<code>npm run docs:build</code>得到的dist文件夹和其他图片文件夹全部复制到updata文件夹里，然后右键<code>Git Bash Here</code>，输入命令<code>git clone + 你的仓库地址</code> （推荐用HTTPS地址，执行此命令前去关闭SLL证书验证，）</p><p><img src="'+k+`" alt="alt text"></p><p>因为我的报错SLL证书问题，可以临时禁用证书验证，所以直接按照图片里操作<code>临时禁用证书验证后面添加文件部分查看3.3</code></p><p>此时文件夹中会出现仓库名命名的文件夹，打开GitHub远程仓库文件夹，右键<code>Git Bash Here</code>或者直接<code>cd &quot;+文件夹名&quot;</code></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git branch -m master</span></span>
<span class="line"><span>git push -u origin master</span></span></code></pre></div><p>设置了本地master分支追踪远程origin仓库的master分支，这意味着今后在本地对master分支进行任何修改后，可以通过简单的<code>git push</code>命令来同步到远程仓库，无需再次指定远程分支</p></div><blockquote><p>部署过的，在更新时候到这里就完成更新了🎉 💯</p></blockquote><p>关联远程仓库<code>git remote add origin &quot;ssh地址&quot;</code>第一次设置好后后面不用管</p><p>拉取远程仓库选择代码 ：<code>第一次设置好后后面不用管</code></p><div class="language-BASH vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">BASH</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>或者</p><div class="language-bASH vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bASH</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-unrelated-histories</span></span></code></pre></div><p>或者</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>视情况而定，一般用第二个，具体区别网上有教程。</p><p>2.删除仓库文件(可选)</p><p>删除文件夹<code>git rm -r --cached + 想要删除的文件夹</code></p><p>提交删除说明 <code>git commit -m &quot;删除了xx&quot;</code></p><p>更新GitHub远程仓库<code>git push -u origin master</code></p><p>3.添加文件</p><p>拉取远程仓库<code>git pull origin master --allow-unrelated-histories</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 初始化一个新的Git仓库（添加git环境--可选）</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .“.”</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的意思是所有文件，也可以指定文件</span></span></code></pre></div><p>提交说明</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;updata&quot;</span></span></code></pre></div><p>更新GitHub远程仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (如果是main分支就修改为main)</span></span></code></pre></div><p>此时如果没有报错，那么Github对应仓库已经更新。</p><p>3.1、但我们的报错了：无法连接到GitHub服务器，这可能是由于网络问题、SSH密钥配置问题或GitHub服务器地址设置不正确等原因导致的。</p><p><span style="color:#999;">具体问题具体分析：方法不固定(自己去查)，我这里尝试使用使用HTTPS代替SSH：如果你不想使用SSH，也可以选择使用HTTPS方式推送。首先，你需要在你的Git仓库中更改远程仓库的URL，将其更改为HTTPS格式，</span>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/12yyyyy/vit.git</span></span></code></pre></div><p>然后<code>git push</code></p><p>3.2、尝试使用git push命令推送他的master分支到远程仓库，但是遇到了一个错误，因为当前的master分支还没有与远程的一个分支建立关联（即没有上游分支）。这是常见的当一个新分支第一次被推送到远程仓库时会遇到的情况。 <img src="`+b+'" alt="alt text"></p><p><span style="color:#999;">为了解决这个问题，可以使用下面这条命令。这条命令不仅会推送master分支到远程仓库的origin，同时还会设置远程的master分支作为本地master分支的上游跟踪分支。这样，在未来再执行git push时，Git就会知道要将本地的master分支推送到远程的哪个分支。</span></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push --set-upstream origin master</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>这将完成master分支的首次推送，并且设置远程分支作为跟踪分支。</p></div><p>3.3、如果不出意外的话意外来了：在尝试用<code>git push --set-upstream origin master</code>命令推送代码到GitHub仓库时遇到了<strong>SSL证书</strong>问题，具体是“无法获取本地发行者证书”。这意味着Git在尝试验证HTTPS连接的安全性时未能找到或信任用于签名GitHub服务器证书的本地根证书。</p><p>忍无可忍，直接临时禁用证书验证，然后<code>git push --set-upstream origin master</code>就能成功，成功后记得关闭禁用证书：</p><p>作为最后的手段，可以尝试临时禁用HTTPS的证书验证，但这会降低安全性，只应在调试或临时解决问题时使用。可以通过设置<code>http.sslVerify</code>为<code>false</code>来禁用证书验证：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.sslVerify</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p>但是，强烈建议在问题解决后立即撤销这一设置，恢复证书验证，以保障数据传输的安全性。</p><p>为了重新启用TLS证书验证，需要撤销之前设置的<code>git config --global http.sslVerify false</code>。他可以通过运行下面的命令来实现：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.sslVerify</span></span></code></pre></div><p>如果--unset选项不起作用，可能是因为http.sslVerify之前被设置为明确的false，所以最保险的方式是将其设置回默认的true值，即开启证书验证：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.sslVerify</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p>这样操作之后，TLS证书验证就会被重新启用，从而提升HTTPS连接的安全性。记得在完成测试或解决证书问题后，应当尽快执行上述命令，以确保所有HTTPS连接都是安全和加密的。</p>',88),F=[y];function v(C,B,_,S,H,f){return a(),i("div",null,F)}const E=s(m,[["render",v]]);export{G as __pageData,E as default};
