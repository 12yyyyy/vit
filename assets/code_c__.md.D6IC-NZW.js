import{_ as a,c as t,o as e,a3 as i}from"./chunks/framework.ZS1GtFyN.js";const u=JSON.parse('{"title":"C++知识点-随记","description":"","frontmatter":{},"headers":[],"relativePath":"code/c++.md","filePath":"code/c++.md","lastUpdated":null}'),s={name:"code/c++.md"},l=i(`<h1 id="c-知识点-随记" tabindex="-1">C++知识点-随记 <a class="header-anchor" href="#c-知识点-随记" aria-label="Permalink to &quot;C++知识点-随记&quot;">​</a></h1><p>个人知识点记录</p><h2 id="_1-import" tabindex="-1">1.import <a class="header-anchor" href="#_1-import" aria-label="Permalink to &quot;1.import&quot;">​</a></h2><p><strong>import</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里是你的C++代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, Markdown with C++!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-变量和数据类型" tabindex="-1">1.变量和数据类型 <a class="header-anchor" href="#_1-变量和数据类型" aria-label="Permalink to &quot;1.变量和数据类型&quot;">​</a></h2><p>整型（int, short, long, long long） 浮点型（float, double, long double） 字符型（char） 布尔型（bool）</p><h2 id="_2-运算符" tabindex="-1">2.运算符 <a class="header-anchor" href="#_2-运算符" aria-label="Permalink to &quot;2.运算符&quot;">​</a></h2><p>算术运算符（+,-,*,/,%） 比较运算符（==, !=, &lt;, &gt;, &lt;=, &gt;=） 逻辑运算符（&amp;&amp;, ||, !） 位运算符（&amp;, |, ^, ~, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;） 赋值运算符（=, +=, -=, *=, /=） 条件运算符（?:）</p><h2 id="_3-控制结构" tabindex="-1">3.控制结构 <a class="header-anchor" href="#_3-控制结构" aria-label="Permalink to &quot;3.控制结构&quot;">​</a></h2><p>顺序结构 选择结构（if, switch） 循环结构（for, while, do-while）</p><h2 id="_4-函数" tabindex="-1">4.函数 <a class="header-anchor" href="#_4-函数" aria-label="Permalink to &quot;4.函数&quot;">​</a></h2><p>函数定义与声明 函数调用与返回 函数重载 默认参数 可变参数</p><h2 id="_5-数组与字符串" tabindex="-1">5.数组与字符串 <a class="header-anchor" href="#_5-数组与字符串" aria-label="Permalink to &quot;5.数组与字符串&quot;">​</a></h2><p>一维数组 多维数组 字符数组与字符串 字符串操作函数</p><h2 id="_6-指针与引用" tabindex="-1">6.指针与引用 <a class="header-anchor" href="#_6-指针与引用" aria-label="Permalink to &quot;6.指针与引用&quot;">​</a></h2><p>指针的概念与基本操作 空指针与野指针 指针的算术运算 引用的概念与使用 指针与引用的区别</p><h2 id="_7-动态内存管理" tabindex="-1">7.动态内存管理 <a class="header-anchor" href="#_7-动态内存管理" aria-label="Permalink to &quot;7.动态内存管理&quot;">​</a></h2><p>new与delete操作符 动态数组的创建与删除 内存泄漏与野指针问题</p><h2 id="_8-面向对象编程基础" tabindex="-1">8.面向对象编程基础 <a class="header-anchor" href="#_8-面向对象编程基础" aria-label="Permalink to &quot;8.面向对象编程基础&quot;">​</a></h2><p>类与对象的定义 类的成员函数与数据成员 构造函数与析构函数 访问修饰符（public, private, protected） 封装、继承与多态的概念</p><h2 id="_9-继承与派生" tabindex="-1">9.继承与派生 <a class="header-anchor" href="#_9-继承与派生" aria-label="Permalink to &quot;9.继承与派生&quot;">​</a></h2><p>继承的方式（public, protected, private） 派生类的构造函数与析构函数 多重继承与虚继承 菱形继承问题及其解决方案</p><h2 id="_10-多态与虚函数" tabindex="-1">10.多态与虚函数 <a class="header-anchor" href="#_10-多态与虚函数" aria-label="Permalink to &quot;10.多态与虚函数&quot;">​</a></h2><p>多态的概念与实现方式 虚函数与纯虚函数的定义与使用 抽象类与接口的概念 动态绑定与静态绑定</p><h2 id="_11-模板编程" tabindex="-1">11.模板编程 <a class="header-anchor" href="#_11-模板编程" aria-label="Permalink to &quot;11.模板编程&quot;">​</a></h2><p>函数模板与类模板的定义与使用 模板特化与偏特化 STL（标准模板库）的基本组成与使用（如vector, list, map, set等）</p><h2 id="_12-异常处理" tabindex="-1">12.异常处理 <a class="header-anchor" href="#_12-异常处理" aria-label="Permalink to &quot;12.异常处理&quot;">​</a></h2><p>try-catch语句的使用 自定义异常类的创建与抛出 异常的传递与堆栈消失问题</p><h2 id="_13-文件操作与流" tabindex="-1">13.文件操作与流 <a class="header-anchor" href="#_13-文件操作与流" aria-label="Permalink to &quot;13.文件操作与流&quot;">​</a></h2><p>文件的打开、读写与关闭操作 文本文件与二进制文件的处理差异 C++中的输入输出流（istream, ostream）及其操作</p><h2 id="_14-多线程编程基础" tabindex="-1">14.多线程编程基础 <a class="header-anchor" href="#_14-多线程编程基础" aria-label="Permalink to &quot;14.多线程编程基础&quot;">​</a></h2><p>线程的概念与创建方式 线程的同步与互斥（如互斥锁、条件变量等） 多线程数据共享与竞争问题及其解决方案</p><h2 id="_15-泛型编程与stl深入应用" tabindex="-1">15.泛型编程与STL深入应用 <a class="header-anchor" href="#_15-泛型编程与stl深入应用" aria-label="Permalink to &quot;15.泛型编程与STL深入应用&quot;">​</a></h2><p>泛型算法的使用与实现原理（如sort, find等） STL容器的内部实现原理与优化策略 STL中的分配器与迭代器概念及其应用</p><h2 id="_16-c-11-14-17-20新特性介绍与实践" tabindex="-1">16.C++11/14/17/20新特性介绍与实践 <a class="header-anchor" href="#_16-c-11-14-17-20新特性介绍与实践" aria-label="Permalink to &quot;16.C++11/14/17/20新特性介绍与实践&quot;">​</a></h2><p>自动类型推导（auto关键字）与范围for循环的使用 智能指针（unique_ptr, shared_ptr, weak_ptr）的概念与应用场景 右值引用与移动语义的介绍与实践 lambda表达式的创建与使用场景 并发库（如std::thread, std::async, std::future等）的使用与注意事项</p><h2 id="更多" tabindex="-1">更多 <a class="header-anchor" href="#更多" aria-label="Permalink to &quot;更多&quot;">​</a></h2><p>更多 <a href="https://pang12.com" target="_blank" rel="noreferrer">点击查看</a></p>`,39),h=[l];function r(n,o,p,d,c,k){return e(),t("div",null,h)}const b=a(s,[["render",r]]);export{u as __pageData,b as default};
